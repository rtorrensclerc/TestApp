{"version":3,"sources":["components/contacts.js","App.js","serviceWorker.js","index.js"],"names":["Contacts","contacts","class","type","data-toggle","aria-haspopup","aria-expanded","href","map","contact","name","email","company","catchPhrase","App","state","this","fetch","then","res","json","data","setState","catch","console","log","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"uMAoCeA,EAhCE,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAClB,OAEE,yBAAKC,MAAM,gBACT,gCAAQ,6CACR,yBAAKA,MAAM,aACP,4BAAQC,KAAK,SAASD,MAAM,kBAA5B,UACA,4BAAQC,KAAK,SAASD,MAAM,uDAAuDE,cAAY,WAAWC,gBAAc,OAAOC,gBAAc,SAC3I,0BAAMJ,MAAM,WAAZ,oBAEF,yBAAKA,MAAM,iBACT,uBAAGA,MAAM,gBAAgBK,KAAK,KAA9B,UACA,uBAAGL,MAAM,gBAAgBK,KAAK,KAA9B,kBACA,uBAAGL,MAAM,gBAAgBK,KAAK,KAA9B,uBACA,yBAAKL,MAAM,qBACX,uBAAGA,MAAM,gBAAgBK,KAAK,KAA9B,oBAGLN,EAASO,KAAI,SAACC,GAAD,OACZ,yBAAKP,MAAM,QACT,yBAAKA,MAAM,aACT,wBAAIA,MAAM,cAAcO,EAAQC,MAChC,wBAAIR,MAAM,iCAAiCO,EAAQE,OACnD,uBAAGT,MAAM,aAAaO,EAAQG,QAAQC,oBCCnCC,E,4MAdbC,MAAQ,CACNd,SAAU,I,uDAVV,OACE,6BAGE,kBAAC,EAAD,CAAUA,SAAUe,KAAKD,MAAMd,c,0CAShB,IAAD,OAClBgB,MAAM,6CACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACG,GACL,EAAKC,SAAS,CAAErB,SAAUoB,OAE3BE,MAAMC,QAAQC,S,GArBHC,aCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdlB,OAAM,SAAAmB,GACLlB,QAAQkB,MAAMA,EAAMC,a","file":"static/js/main.625b5a39.chunk.js","sourcesContent":["// src/components/contacts.js\r\n\r\nimport React from 'react'\r\n\r\nconst Contacts = ({ contacts }) => {\r\n  return (\r\n\r\n    <div class=\"container-sm\">\r\n      <center><h1>Contact List</h1></center>\r\n      <div class=\"btn-group\">\r\n          <button type=\"button\" class=\"btn btn-danger\">Action</button>\r\n          <button type=\"button\" class=\"btn btn-danger dropdown-toggle dropdown-toggle-split\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n            <span class=\"sr-only\">Toggle Dropdown</span>\r\n          </button>\r\n          <div class=\"dropdown-menu\">\r\n            <a class=\"dropdown-item\" href=\"#\">Action</a>\r\n            <a class=\"dropdown-item\" href=\"#\">Another action</a>\r\n            <a class=\"dropdown-item\" href=\"#\">Something else here</a>\r\n            <div class=\"dropdown-divider\"></div>\r\n            <a class=\"dropdown-item\" href=\"#\">Separated link</a>\r\n          </div>\r\n        </div>\r\n      {contacts.map((contact) => (\r\n        <div class=\"card\">\r\n          <div class=\"card-body\">\r\n            <h5 class=\"card-title\">{contact.name}</h5>\r\n            <h6 class=\"card-subtitle mb-2 text-muted\">{contact.email}</h6>\r\n            <p class=\"card-text\">{contact.company.catchPhrase}</p>\r\n          </div>\r\n        </div>\r\n      ))}\r\n      \r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Contacts","import React, { Component } from 'react';\nimport Contacts from './components/contacts';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n\n        \n        <Contacts contacts={this.state.contacts} />\n      </div>\n    )\n  }\n\n  state = {\n    contacts: []\n  };\n\n  componentDidMount() {\n    fetch('http://jsonplaceholder.typicode.com/users')\n      .then(res => res.json())\n      .then((data) => {\n        this.setState({ contacts: data })\n      })\n      .catch(console.log)\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}